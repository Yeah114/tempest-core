// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/playerkit.proto

package playerkitpb

import (
	context "context"
	response "github.com/Yeah114/tempest-core/network_api/response"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlayerKitService_GetAllOnlinePlayers_FullMethodName          = "/fateark.proto.playerkit.PlayerKitService/GetAllOnlinePlayers"
	PlayerKitService_GetPlayerByName_FullMethodName              = "/fateark.proto.playerkit.PlayerKitService/GetPlayerByName"
	PlayerKitService_GetPlayerByUUID_FullMethodName              = "/fateark.proto.playerkit.PlayerKitService/GetPlayerByUUID"
	PlayerKitService_ReleaseBindPlayer_FullMethodName            = "/fateark.proto.playerkit.PlayerKitService/ReleaseBindPlayer"
	PlayerKitService_GetPlayerName_FullMethodName                = "/fateark.proto.playerkit.PlayerKitService/GetPlayerName"
	PlayerKitService_GetPlayerEntityUniqueID_FullMethodName      = "/fateark.proto.playerkit.PlayerKitService/GetPlayerEntityUniqueID"
	PlayerKitService_GetPlayerLoginTime_FullMethodName           = "/fateark.proto.playerkit.PlayerKitService/GetPlayerLoginTime"
	PlayerKitService_GetPlayerPlatformChatID_FullMethodName      = "/fateark.proto.playerkit.PlayerKitService/GetPlayerPlatformChatID"
	PlayerKitService_GetPlayerBuildPlatform_FullMethodName       = "/fateark.proto.playerkit.PlayerKitService/GetPlayerBuildPlatform"
	PlayerKitService_GetPlayerSkinID_FullMethodName              = "/fateark.proto.playerkit.PlayerKitService/GetPlayerSkinID"
	PlayerKitService_GetPlayerCanBuild_FullMethodName            = "/fateark.proto.playerkit.PlayerKitService/GetPlayerCanBuild"
	PlayerKitService_SetPlayerCanBuild_FullMethodName            = "/fateark.proto.playerkit.PlayerKitService/SetPlayerCanBuild"
	PlayerKitService_GetPlayerCanDig_FullMethodName              = "/fateark.proto.playerkit.PlayerKitService/GetPlayerCanDig"
	PlayerKitService_SetPlayerCanDig_FullMethodName              = "/fateark.proto.playerkit.PlayerKitService/SetPlayerCanDig"
	PlayerKitService_GetPlayerCanDoorsAndSwitches_FullMethodName = "/fateark.proto.playerkit.PlayerKitService/GetPlayerCanDoorsAndSwitches"
	PlayerKitService_SetPlayerCanDoorsAndSwitches_FullMethodName = "/fateark.proto.playerkit.PlayerKitService/SetPlayerCanDoorsAndSwitches"
	PlayerKitService_GetPlayerCanOpenContainers_FullMethodName   = "/fateark.proto.playerkit.PlayerKitService/GetPlayerCanOpenContainers"
	PlayerKitService_SetPlayerCanOpenContainers_FullMethodName   = "/fateark.proto.playerkit.PlayerKitService/SetPlayerCanOpenContainers"
	PlayerKitService_GetPlayerCanAttackPlayers_FullMethodName    = "/fateark.proto.playerkit.PlayerKitService/GetPlayerCanAttackPlayers"
	PlayerKitService_SetPlayerCanAttackPlayers_FullMethodName    = "/fateark.proto.playerkit.PlayerKitService/SetPlayerCanAttackPlayers"
	PlayerKitService_GetPlayerCanAttackMobs_FullMethodName       = "/fateark.proto.playerkit.PlayerKitService/GetPlayerCanAttackMobs"
	PlayerKitService_SetPlayerCanAttackMobs_FullMethodName       = "/fateark.proto.playerkit.PlayerKitService/SetPlayerCanAttackMobs"
	PlayerKitService_GetPlayerCanOperatorCommands_FullMethodName = "/fateark.proto.playerkit.PlayerKitService/GetPlayerCanOperatorCommands"
	PlayerKitService_SetPlayerCanOperatorCommands_FullMethodName = "/fateark.proto.playerkit.PlayerKitService/SetPlayerCanOperatorCommands"
	PlayerKitService_GetPlayerCanTeleport_FullMethodName         = "/fateark.proto.playerkit.PlayerKitService/GetPlayerCanTeleport"
	PlayerKitService_SetPlayerCanTeleport_FullMethodName         = "/fateark.proto.playerkit.PlayerKitService/SetPlayerCanTeleport"
	PlayerKitService_GetPlayerStatusInvulnerable_FullMethodName  = "/fateark.proto.playerkit.PlayerKitService/GetPlayerStatusInvulnerable"
	PlayerKitService_GetPlayerStatusFlying_FullMethodName        = "/fateark.proto.playerkit.PlayerKitService/GetPlayerStatusFlying"
	PlayerKitService_GetPlayerStatusMayFly_FullMethodName        = "/fateark.proto.playerkit.PlayerKitService/GetPlayerStatusMayFly"
	PlayerKitService_GetPlayerDeviceID_FullMethodName            = "/fateark.proto.playerkit.PlayerKitService/GetPlayerDeviceID"
	PlayerKitService_GetPlayerEntityRuntimeID_FullMethodName     = "/fateark.proto.playerkit.PlayerKitService/GetPlayerEntityRuntimeID"
	PlayerKitService_GetPlayerEntityMetadata_FullMethodName      = "/fateark.proto.playerkit.PlayerKitService/GetPlayerEntityMetadata"
	PlayerKitService_GetPlayerIsOP_FullMethodName                = "/fateark.proto.playerkit.PlayerKitService/GetPlayerIsOP"
	PlayerKitService_GetPlayerOnline_FullMethodName              = "/fateark.proto.playerkit.PlayerKitService/GetPlayerOnline"
	PlayerKitService_SendPlayerChat_FullMethodName               = "/fateark.proto.playerkit.PlayerKitService/SendPlayerChat"
	PlayerKitService_SendPlayerRawChat_FullMethodName            = "/fateark.proto.playerkit.PlayerKitService/SendPlayerRawChat"
	PlayerKitService_SendPlayerTitle_FullMethodName              = "/fateark.proto.playerkit.PlayerKitService/SendPlayerTitle"
	PlayerKitService_SendPlayerActionBar_FullMethodName          = "/fateark.proto.playerkit.PlayerKitService/SendPlayerActionBar"
	PlayerKitService_InterceptPlayerJustNextInput_FullMethodName = "/fateark.proto.playerkit.PlayerKitService/InterceptPlayerJustNextInput"
)

// PlayerKitServiceClient is the client API for PlayerKitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerKitServiceClient interface {
	GetAllOnlinePlayers(ctx context.Context, in *GetAllOnlinePlayersRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	GetPlayerByName(ctx context.Context, in *GetPlayerByNameRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	GetPlayerByUUID(ctx context.Context, in *GetPlayerByUUIDRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	ReleaseBindPlayer(ctx context.Context, in *ReleaseBindPlayerRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	GetPlayerName(ctx context.Context, in *GetPlayerNameRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	GetPlayerEntityUniqueID(ctx context.Context, in *GetPlayerEntityUniqueIDRequest, opts ...grpc.CallOption) (*response.GeneralInt64Response, error)
	GetPlayerLoginTime(ctx context.Context, in *GetPlayerLoginTimeRequest, opts ...grpc.CallOption) (*response.GeneralInt64Response, error)
	GetPlayerPlatformChatID(ctx context.Context, in *GetPlayerPlatformChatIDRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	GetPlayerBuildPlatform(ctx context.Context, in *GetPlayerBuildPlatformRequest, opts ...grpc.CallOption) (*response.GeneralInt32Response, error)
	GetPlayerSkinID(ctx context.Context, in *GetPlayerSkinIDRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	GetPlayerCanBuild(ctx context.Context, in *GetPlayerCanBuildRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error)
	SetPlayerCanBuild(ctx context.Context, in *SetPlayerCanBuildRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	GetPlayerCanDig(ctx context.Context, in *GetPlayerCanDigRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error)
	SetPlayerCanDig(ctx context.Context, in *SetPlayerCanDigRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	GetPlayerCanDoorsAndSwitches(ctx context.Context, in *GetPlayerCanDoorsAndSwitchesRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error)
	SetPlayerCanDoorsAndSwitches(ctx context.Context, in *SetPlayerCanDoorsAndSwitchesRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	GetPlayerCanOpenContainers(ctx context.Context, in *GetPlayerCanOpenContainersRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error)
	SetPlayerCanOpenContainers(ctx context.Context, in *SetPlayerCanOpenContainersRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	GetPlayerCanAttackPlayers(ctx context.Context, in *GetPlayerCanAttackPlayersRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error)
	SetPlayerCanAttackPlayers(ctx context.Context, in *SetPlayerCanAttackPlayersRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	GetPlayerCanAttackMobs(ctx context.Context, in *GetPlayerCanAttackMobsRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error)
	SetPlayerCanAttackMobs(ctx context.Context, in *SetPlayerCanAttackMobsRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	GetPlayerCanOperatorCommands(ctx context.Context, in *GetPlayerCanOperatorCommandsRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error)
	SetPlayerCanOperatorCommands(ctx context.Context, in *SetPlayerCanOperatorCommandsRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	GetPlayerCanTeleport(ctx context.Context, in *GetPlayerCanTeleportRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error)
	SetPlayerCanTeleport(ctx context.Context, in *SetPlayerCanTeleportRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error)
	GetPlayerStatusInvulnerable(ctx context.Context, in *GetPlayerStatusInvulnerableRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error)
	GetPlayerStatusFlying(ctx context.Context, in *GetPlayerStatusFlyingRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error)
	GetPlayerStatusMayFly(ctx context.Context, in *GetPlayerStatusMayFlyRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error)
	GetPlayerDeviceID(ctx context.Context, in *GetPlayerDeviceIDRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	GetPlayerEntityRuntimeID(ctx context.Context, in *GetPlayerEntityRuntimeIDRequest, opts ...grpc.CallOption) (*response.GeneralUint64Response, error)
	GetPlayerEntityMetadata(ctx context.Context, in *GetPlayerEntityMetadataRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	GetPlayerIsOP(ctx context.Context, in *GetPlayerIsOPRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error)
	GetPlayerOnline(ctx context.Context, in *GetPlayerOnlineRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error)
	SendPlayerChat(ctx context.Context, in *SendPlayerChatRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	SendPlayerRawChat(ctx context.Context, in *SendPlayerRawChatRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	SendPlayerTitle(ctx context.Context, in *SendPlayerTitleRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	SendPlayerActionBar(ctx context.Context, in *SendPlayerActionBarRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	InterceptPlayerJustNextInput(ctx context.Context, in *InterceptPlayerJustNextInputRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
}

type playerKitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerKitServiceClient(cc grpc.ClientConnInterface) PlayerKitServiceClient {
	return &playerKitServiceClient{cc}
}

func (c *playerKitServiceClient) GetAllOnlinePlayers(ctx context.Context, in *GetAllOnlinePlayersRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_GetAllOnlinePlayers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerByName(ctx context.Context, in *GetPlayerByNameRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerByUUID(ctx context.Context, in *GetPlayerByUUIDRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) ReleaseBindPlayer(ctx context.Context, in *ReleaseBindPlayerRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_ReleaseBindPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerName(ctx context.Context, in *GetPlayerNameRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerEntityUniqueID(ctx context.Context, in *GetPlayerEntityUniqueIDRequest, opts ...grpc.CallOption) (*response.GeneralInt64Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralInt64Response)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerEntityUniqueID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerLoginTime(ctx context.Context, in *GetPlayerLoginTimeRequest, opts ...grpc.CallOption) (*response.GeneralInt64Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralInt64Response)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerLoginTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerPlatformChatID(ctx context.Context, in *GetPlayerPlatformChatIDRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerPlatformChatID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerBuildPlatform(ctx context.Context, in *GetPlayerBuildPlatformRequest, opts ...grpc.CallOption) (*response.GeneralInt32Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralInt32Response)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerBuildPlatform_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerSkinID(ctx context.Context, in *GetPlayerSkinIDRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerSkinID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerCanBuild(ctx context.Context, in *GetPlayerCanBuildRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralBoolResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerCanBuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) SetPlayerCanBuild(ctx context.Context, in *SetPlayerCanBuildRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_SetPlayerCanBuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerCanDig(ctx context.Context, in *GetPlayerCanDigRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralBoolResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerCanDig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) SetPlayerCanDig(ctx context.Context, in *SetPlayerCanDigRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_SetPlayerCanDig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerCanDoorsAndSwitches(ctx context.Context, in *GetPlayerCanDoorsAndSwitchesRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralBoolResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerCanDoorsAndSwitches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) SetPlayerCanDoorsAndSwitches(ctx context.Context, in *SetPlayerCanDoorsAndSwitchesRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_SetPlayerCanDoorsAndSwitches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerCanOpenContainers(ctx context.Context, in *GetPlayerCanOpenContainersRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralBoolResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerCanOpenContainers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) SetPlayerCanOpenContainers(ctx context.Context, in *SetPlayerCanOpenContainersRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_SetPlayerCanOpenContainers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerCanAttackPlayers(ctx context.Context, in *GetPlayerCanAttackPlayersRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralBoolResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerCanAttackPlayers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) SetPlayerCanAttackPlayers(ctx context.Context, in *SetPlayerCanAttackPlayersRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_SetPlayerCanAttackPlayers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerCanAttackMobs(ctx context.Context, in *GetPlayerCanAttackMobsRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralBoolResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerCanAttackMobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) SetPlayerCanAttackMobs(ctx context.Context, in *SetPlayerCanAttackMobsRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_SetPlayerCanAttackMobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerCanOperatorCommands(ctx context.Context, in *GetPlayerCanOperatorCommandsRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralBoolResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerCanOperatorCommands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) SetPlayerCanOperatorCommands(ctx context.Context, in *SetPlayerCanOperatorCommandsRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_SetPlayerCanOperatorCommands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerCanTeleport(ctx context.Context, in *GetPlayerCanTeleportRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralBoolResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerCanTeleport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) SetPlayerCanTeleport(ctx context.Context, in *SetPlayerCanTeleportRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralBoolResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_SetPlayerCanTeleport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerStatusInvulnerable(ctx context.Context, in *GetPlayerStatusInvulnerableRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralBoolResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerStatusInvulnerable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerStatusFlying(ctx context.Context, in *GetPlayerStatusFlyingRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralBoolResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerStatusFlying_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerStatusMayFly(ctx context.Context, in *GetPlayerStatusMayFlyRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralBoolResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerStatusMayFly_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerDeviceID(ctx context.Context, in *GetPlayerDeviceIDRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerDeviceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerEntityRuntimeID(ctx context.Context, in *GetPlayerEntityRuntimeIDRequest, opts ...grpc.CallOption) (*response.GeneralUint64Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralUint64Response)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerEntityRuntimeID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerEntityMetadata(ctx context.Context, in *GetPlayerEntityMetadataRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerEntityMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerIsOP(ctx context.Context, in *GetPlayerIsOPRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralBoolResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerIsOP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) GetPlayerOnline(ctx context.Context, in *GetPlayerOnlineRequest, opts ...grpc.CallOption) (*response.GeneralBoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralBoolResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_GetPlayerOnline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) SendPlayerChat(ctx context.Context, in *SendPlayerChatRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_SendPlayerChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) SendPlayerRawChat(ctx context.Context, in *SendPlayerRawChatRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_SendPlayerRawChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) SendPlayerTitle(ctx context.Context, in *SendPlayerTitleRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_SendPlayerTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) SendPlayerActionBar(ctx context.Context, in *SendPlayerActionBarRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_SendPlayerActionBar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerKitServiceClient) InterceptPlayerJustNextInput(ctx context.Context, in *InterceptPlayerJustNextInputRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, PlayerKitService_InterceptPlayerJustNextInput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerKitServiceServer is the server API for PlayerKitService service.
// All implementations must embed UnimplementedPlayerKitServiceServer
// for forward compatibility.
type PlayerKitServiceServer interface {
	GetAllOnlinePlayers(context.Context, *GetAllOnlinePlayersRequest) (*response.GeneralResponse, error)
	GetPlayerByName(context.Context, *GetPlayerByNameRequest) (*response.GeneralResponse, error)
	GetPlayerByUUID(context.Context, *GetPlayerByUUIDRequest) (*response.GeneralResponse, error)
	ReleaseBindPlayer(context.Context, *ReleaseBindPlayerRequest) (*response.GeneralResponse, error)
	GetPlayerName(context.Context, *GetPlayerNameRequest) (*response.GeneralResponse, error)
	GetPlayerEntityUniqueID(context.Context, *GetPlayerEntityUniqueIDRequest) (*response.GeneralInt64Response, error)
	GetPlayerLoginTime(context.Context, *GetPlayerLoginTimeRequest) (*response.GeneralInt64Response, error)
	GetPlayerPlatformChatID(context.Context, *GetPlayerPlatformChatIDRequest) (*response.GeneralResponse, error)
	GetPlayerBuildPlatform(context.Context, *GetPlayerBuildPlatformRequest) (*response.GeneralInt32Response, error)
	GetPlayerSkinID(context.Context, *GetPlayerSkinIDRequest) (*response.GeneralResponse, error)
	GetPlayerCanBuild(context.Context, *GetPlayerCanBuildRequest) (*response.GeneralBoolResponse, error)
	SetPlayerCanBuild(context.Context, *SetPlayerCanBuildRequest) (*response.GeneralResponse, error)
	GetPlayerCanDig(context.Context, *GetPlayerCanDigRequest) (*response.GeneralBoolResponse, error)
	SetPlayerCanDig(context.Context, *SetPlayerCanDigRequest) (*response.GeneralResponse, error)
	GetPlayerCanDoorsAndSwitches(context.Context, *GetPlayerCanDoorsAndSwitchesRequest) (*response.GeneralBoolResponse, error)
	SetPlayerCanDoorsAndSwitches(context.Context, *SetPlayerCanDoorsAndSwitchesRequest) (*response.GeneralResponse, error)
	GetPlayerCanOpenContainers(context.Context, *GetPlayerCanOpenContainersRequest) (*response.GeneralBoolResponse, error)
	SetPlayerCanOpenContainers(context.Context, *SetPlayerCanOpenContainersRequest) (*response.GeneralResponse, error)
	GetPlayerCanAttackPlayers(context.Context, *GetPlayerCanAttackPlayersRequest) (*response.GeneralBoolResponse, error)
	SetPlayerCanAttackPlayers(context.Context, *SetPlayerCanAttackPlayersRequest) (*response.GeneralResponse, error)
	GetPlayerCanAttackMobs(context.Context, *GetPlayerCanAttackMobsRequest) (*response.GeneralBoolResponse, error)
	SetPlayerCanAttackMobs(context.Context, *SetPlayerCanAttackMobsRequest) (*response.GeneralResponse, error)
	GetPlayerCanOperatorCommands(context.Context, *GetPlayerCanOperatorCommandsRequest) (*response.GeneralBoolResponse, error)
	SetPlayerCanOperatorCommands(context.Context, *SetPlayerCanOperatorCommandsRequest) (*response.GeneralResponse, error)
	GetPlayerCanTeleport(context.Context, *GetPlayerCanTeleportRequest) (*response.GeneralBoolResponse, error)
	SetPlayerCanTeleport(context.Context, *SetPlayerCanTeleportRequest) (*response.GeneralBoolResponse, error)
	GetPlayerStatusInvulnerable(context.Context, *GetPlayerStatusInvulnerableRequest) (*response.GeneralBoolResponse, error)
	GetPlayerStatusFlying(context.Context, *GetPlayerStatusFlyingRequest) (*response.GeneralBoolResponse, error)
	GetPlayerStatusMayFly(context.Context, *GetPlayerStatusMayFlyRequest) (*response.GeneralBoolResponse, error)
	GetPlayerDeviceID(context.Context, *GetPlayerDeviceIDRequest) (*response.GeneralResponse, error)
	GetPlayerEntityRuntimeID(context.Context, *GetPlayerEntityRuntimeIDRequest) (*response.GeneralUint64Response, error)
	GetPlayerEntityMetadata(context.Context, *GetPlayerEntityMetadataRequest) (*response.GeneralResponse, error)
	GetPlayerIsOP(context.Context, *GetPlayerIsOPRequest) (*response.GeneralBoolResponse, error)
	GetPlayerOnline(context.Context, *GetPlayerOnlineRequest) (*response.GeneralBoolResponse, error)
	SendPlayerChat(context.Context, *SendPlayerChatRequest) (*response.GeneralResponse, error)
	SendPlayerRawChat(context.Context, *SendPlayerRawChatRequest) (*response.GeneralResponse, error)
	SendPlayerTitle(context.Context, *SendPlayerTitleRequest) (*response.GeneralResponse, error)
	SendPlayerActionBar(context.Context, *SendPlayerActionBarRequest) (*response.GeneralResponse, error)
	InterceptPlayerJustNextInput(context.Context, *InterceptPlayerJustNextInputRequest) (*response.GeneralResponse, error)
	mustEmbedUnimplementedPlayerKitServiceServer()
}

// UnimplementedPlayerKitServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlayerKitServiceServer struct{}

func (UnimplementedPlayerKitServiceServer) GetAllOnlinePlayers(context.Context, *GetAllOnlinePlayersRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOnlinePlayers not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerByName(context.Context, *GetPlayerByNameRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerByName not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerByUUID(context.Context, *GetPlayerByUUIDRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerByUUID not implemented")
}
func (UnimplementedPlayerKitServiceServer) ReleaseBindPlayer(context.Context, *ReleaseBindPlayerRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseBindPlayer not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerName(context.Context, *GetPlayerNameRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerName not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerEntityUniqueID(context.Context, *GetPlayerEntityUniqueIDRequest) (*response.GeneralInt64Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerEntityUniqueID not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerLoginTime(context.Context, *GetPlayerLoginTimeRequest) (*response.GeneralInt64Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerLoginTime not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerPlatformChatID(context.Context, *GetPlayerPlatformChatIDRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerPlatformChatID not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerBuildPlatform(context.Context, *GetPlayerBuildPlatformRequest) (*response.GeneralInt32Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerBuildPlatform not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerSkinID(context.Context, *GetPlayerSkinIDRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerSkinID not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerCanBuild(context.Context, *GetPlayerCanBuildRequest) (*response.GeneralBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerCanBuild not implemented")
}
func (UnimplementedPlayerKitServiceServer) SetPlayerCanBuild(context.Context, *SetPlayerCanBuildRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPlayerCanBuild not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerCanDig(context.Context, *GetPlayerCanDigRequest) (*response.GeneralBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerCanDig not implemented")
}
func (UnimplementedPlayerKitServiceServer) SetPlayerCanDig(context.Context, *SetPlayerCanDigRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPlayerCanDig not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerCanDoorsAndSwitches(context.Context, *GetPlayerCanDoorsAndSwitchesRequest) (*response.GeneralBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerCanDoorsAndSwitches not implemented")
}
func (UnimplementedPlayerKitServiceServer) SetPlayerCanDoorsAndSwitches(context.Context, *SetPlayerCanDoorsAndSwitchesRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPlayerCanDoorsAndSwitches not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerCanOpenContainers(context.Context, *GetPlayerCanOpenContainersRequest) (*response.GeneralBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerCanOpenContainers not implemented")
}
func (UnimplementedPlayerKitServiceServer) SetPlayerCanOpenContainers(context.Context, *SetPlayerCanOpenContainersRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPlayerCanOpenContainers not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerCanAttackPlayers(context.Context, *GetPlayerCanAttackPlayersRequest) (*response.GeneralBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerCanAttackPlayers not implemented")
}
func (UnimplementedPlayerKitServiceServer) SetPlayerCanAttackPlayers(context.Context, *SetPlayerCanAttackPlayersRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPlayerCanAttackPlayers not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerCanAttackMobs(context.Context, *GetPlayerCanAttackMobsRequest) (*response.GeneralBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerCanAttackMobs not implemented")
}
func (UnimplementedPlayerKitServiceServer) SetPlayerCanAttackMobs(context.Context, *SetPlayerCanAttackMobsRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPlayerCanAttackMobs not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerCanOperatorCommands(context.Context, *GetPlayerCanOperatorCommandsRequest) (*response.GeneralBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerCanOperatorCommands not implemented")
}
func (UnimplementedPlayerKitServiceServer) SetPlayerCanOperatorCommands(context.Context, *SetPlayerCanOperatorCommandsRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPlayerCanOperatorCommands not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerCanTeleport(context.Context, *GetPlayerCanTeleportRequest) (*response.GeneralBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerCanTeleport not implemented")
}
func (UnimplementedPlayerKitServiceServer) SetPlayerCanTeleport(context.Context, *SetPlayerCanTeleportRequest) (*response.GeneralBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPlayerCanTeleport not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerStatusInvulnerable(context.Context, *GetPlayerStatusInvulnerableRequest) (*response.GeneralBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStatusInvulnerable not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerStatusFlying(context.Context, *GetPlayerStatusFlyingRequest) (*response.GeneralBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStatusFlying not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerStatusMayFly(context.Context, *GetPlayerStatusMayFlyRequest) (*response.GeneralBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStatusMayFly not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerDeviceID(context.Context, *GetPlayerDeviceIDRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerDeviceID not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerEntityRuntimeID(context.Context, *GetPlayerEntityRuntimeIDRequest) (*response.GeneralUint64Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerEntityRuntimeID not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerEntityMetadata(context.Context, *GetPlayerEntityMetadataRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerEntityMetadata not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerIsOP(context.Context, *GetPlayerIsOPRequest) (*response.GeneralBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerIsOP not implemented")
}
func (UnimplementedPlayerKitServiceServer) GetPlayerOnline(context.Context, *GetPlayerOnlineRequest) (*response.GeneralBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerOnline not implemented")
}
func (UnimplementedPlayerKitServiceServer) SendPlayerChat(context.Context, *SendPlayerChatRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPlayerChat not implemented")
}
func (UnimplementedPlayerKitServiceServer) SendPlayerRawChat(context.Context, *SendPlayerRawChatRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPlayerRawChat not implemented")
}
func (UnimplementedPlayerKitServiceServer) SendPlayerTitle(context.Context, *SendPlayerTitleRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPlayerTitle not implemented")
}
func (UnimplementedPlayerKitServiceServer) SendPlayerActionBar(context.Context, *SendPlayerActionBarRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPlayerActionBar not implemented")
}
func (UnimplementedPlayerKitServiceServer) InterceptPlayerJustNextInput(context.Context, *InterceptPlayerJustNextInputRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterceptPlayerJustNextInput not implemented")
}
func (UnimplementedPlayerKitServiceServer) mustEmbedUnimplementedPlayerKitServiceServer() {}
func (UnimplementedPlayerKitServiceServer) testEmbeddedByValue()                          {}

// UnsafePlayerKitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerKitServiceServer will
// result in compilation errors.
type UnsafePlayerKitServiceServer interface {
	mustEmbedUnimplementedPlayerKitServiceServer()
}

func RegisterPlayerKitServiceServer(s grpc.ServiceRegistrar, srv PlayerKitServiceServer) {
	// If the following call pancis, it indicates UnimplementedPlayerKitServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlayerKitService_ServiceDesc, srv)
}

func _PlayerKitService_GetAllOnlinePlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOnlinePlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetAllOnlinePlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetAllOnlinePlayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetAllOnlinePlayers(ctx, req.(*GetAllOnlinePlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerByName(ctx, req.(*GetPlayerByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerByUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerByUUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerByUUID(ctx, req.(*GetPlayerByUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_ReleaseBindPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseBindPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).ReleaseBindPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_ReleaseBindPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).ReleaseBindPlayer(ctx, req.(*ReleaseBindPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerName(ctx, req.(*GetPlayerNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerEntityUniqueID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerEntityUniqueIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerEntityUniqueID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerEntityUniqueID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerEntityUniqueID(ctx, req.(*GetPlayerEntityUniqueIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerLoginTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerLoginTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerLoginTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerLoginTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerLoginTime(ctx, req.(*GetPlayerLoginTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerPlatformChatID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerPlatformChatIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerPlatformChatID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerPlatformChatID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerPlatformChatID(ctx, req.(*GetPlayerPlatformChatIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerBuildPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerBuildPlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerBuildPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerBuildPlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerBuildPlatform(ctx, req.(*GetPlayerBuildPlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerSkinID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerSkinIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerSkinID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerSkinID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerSkinID(ctx, req.(*GetPlayerSkinIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerCanBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerCanBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerCanBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerCanBuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerCanBuild(ctx, req.(*GetPlayerCanBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_SetPlayerCanBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlayerCanBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).SetPlayerCanBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_SetPlayerCanBuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).SetPlayerCanBuild(ctx, req.(*SetPlayerCanBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerCanDig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerCanDigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerCanDig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerCanDig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerCanDig(ctx, req.(*GetPlayerCanDigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_SetPlayerCanDig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlayerCanDigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).SetPlayerCanDig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_SetPlayerCanDig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).SetPlayerCanDig(ctx, req.(*SetPlayerCanDigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerCanDoorsAndSwitches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerCanDoorsAndSwitchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerCanDoorsAndSwitches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerCanDoorsAndSwitches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerCanDoorsAndSwitches(ctx, req.(*GetPlayerCanDoorsAndSwitchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_SetPlayerCanDoorsAndSwitches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlayerCanDoorsAndSwitchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).SetPlayerCanDoorsAndSwitches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_SetPlayerCanDoorsAndSwitches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).SetPlayerCanDoorsAndSwitches(ctx, req.(*SetPlayerCanDoorsAndSwitchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerCanOpenContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerCanOpenContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerCanOpenContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerCanOpenContainers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerCanOpenContainers(ctx, req.(*GetPlayerCanOpenContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_SetPlayerCanOpenContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlayerCanOpenContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).SetPlayerCanOpenContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_SetPlayerCanOpenContainers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).SetPlayerCanOpenContainers(ctx, req.(*SetPlayerCanOpenContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerCanAttackPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerCanAttackPlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerCanAttackPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerCanAttackPlayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerCanAttackPlayers(ctx, req.(*GetPlayerCanAttackPlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_SetPlayerCanAttackPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlayerCanAttackPlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).SetPlayerCanAttackPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_SetPlayerCanAttackPlayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).SetPlayerCanAttackPlayers(ctx, req.(*SetPlayerCanAttackPlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerCanAttackMobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerCanAttackMobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerCanAttackMobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerCanAttackMobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerCanAttackMobs(ctx, req.(*GetPlayerCanAttackMobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_SetPlayerCanAttackMobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlayerCanAttackMobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).SetPlayerCanAttackMobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_SetPlayerCanAttackMobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).SetPlayerCanAttackMobs(ctx, req.(*SetPlayerCanAttackMobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerCanOperatorCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerCanOperatorCommandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerCanOperatorCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerCanOperatorCommands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerCanOperatorCommands(ctx, req.(*GetPlayerCanOperatorCommandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_SetPlayerCanOperatorCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlayerCanOperatorCommandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).SetPlayerCanOperatorCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_SetPlayerCanOperatorCommands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).SetPlayerCanOperatorCommands(ctx, req.(*SetPlayerCanOperatorCommandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerCanTeleport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerCanTeleportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerCanTeleport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerCanTeleport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerCanTeleport(ctx, req.(*GetPlayerCanTeleportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_SetPlayerCanTeleport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlayerCanTeleportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).SetPlayerCanTeleport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_SetPlayerCanTeleport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).SetPlayerCanTeleport(ctx, req.(*SetPlayerCanTeleportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerStatusInvulnerable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerStatusInvulnerableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerStatusInvulnerable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerStatusInvulnerable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerStatusInvulnerable(ctx, req.(*GetPlayerStatusInvulnerableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerStatusFlying_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerStatusFlyingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerStatusFlying(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerStatusFlying_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerStatusFlying(ctx, req.(*GetPlayerStatusFlyingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerStatusMayFly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerStatusMayFlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerStatusMayFly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerStatusMayFly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerStatusMayFly(ctx, req.(*GetPlayerStatusMayFlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerDeviceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerDeviceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerDeviceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerDeviceID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerDeviceID(ctx, req.(*GetPlayerDeviceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerEntityRuntimeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerEntityRuntimeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerEntityRuntimeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerEntityRuntimeID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerEntityRuntimeID(ctx, req.(*GetPlayerEntityRuntimeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerEntityMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerEntityMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerEntityMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerEntityMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerEntityMetadata(ctx, req.(*GetPlayerEntityMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerIsOP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerIsOPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerIsOP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerIsOP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerIsOP(ctx, req.(*GetPlayerIsOPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_GetPlayerOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerOnlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).GetPlayerOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_GetPlayerOnline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).GetPlayerOnline(ctx, req.(*GetPlayerOnlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_SendPlayerChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPlayerChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).SendPlayerChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_SendPlayerChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).SendPlayerChat(ctx, req.(*SendPlayerChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_SendPlayerRawChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPlayerRawChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).SendPlayerRawChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_SendPlayerRawChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).SendPlayerRawChat(ctx, req.(*SendPlayerRawChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_SendPlayerTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPlayerTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).SendPlayerTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_SendPlayerTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).SendPlayerTitle(ctx, req.(*SendPlayerTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_SendPlayerActionBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPlayerActionBarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).SendPlayerActionBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_SendPlayerActionBar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).SendPlayerActionBar(ctx, req.(*SendPlayerActionBarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerKitService_InterceptPlayerJustNextInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterceptPlayerJustNextInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerKitServiceServer).InterceptPlayerJustNextInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerKitService_InterceptPlayerJustNextInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerKitServiceServer).InterceptPlayerJustNextInput(ctx, req.(*InterceptPlayerJustNextInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayerKitService_ServiceDesc is the grpc.ServiceDesc for PlayerKitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayerKitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fateark.proto.playerkit.PlayerKitService",
	HandlerType: (*PlayerKitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllOnlinePlayers",
			Handler:    _PlayerKitService_GetAllOnlinePlayers_Handler,
		},
		{
			MethodName: "GetPlayerByName",
			Handler:    _PlayerKitService_GetPlayerByName_Handler,
		},
		{
			MethodName: "GetPlayerByUUID",
			Handler:    _PlayerKitService_GetPlayerByUUID_Handler,
		},
		{
			MethodName: "ReleaseBindPlayer",
			Handler:    _PlayerKitService_ReleaseBindPlayer_Handler,
		},
		{
			MethodName: "GetPlayerName",
			Handler:    _PlayerKitService_GetPlayerName_Handler,
		},
		{
			MethodName: "GetPlayerEntityUniqueID",
			Handler:    _PlayerKitService_GetPlayerEntityUniqueID_Handler,
		},
		{
			MethodName: "GetPlayerLoginTime",
			Handler:    _PlayerKitService_GetPlayerLoginTime_Handler,
		},
		{
			MethodName: "GetPlayerPlatformChatID",
			Handler:    _PlayerKitService_GetPlayerPlatformChatID_Handler,
		},
		{
			MethodName: "GetPlayerBuildPlatform",
			Handler:    _PlayerKitService_GetPlayerBuildPlatform_Handler,
		},
		{
			MethodName: "GetPlayerSkinID",
			Handler:    _PlayerKitService_GetPlayerSkinID_Handler,
		},
		{
			MethodName: "GetPlayerCanBuild",
			Handler:    _PlayerKitService_GetPlayerCanBuild_Handler,
		},
		{
			MethodName: "SetPlayerCanBuild",
			Handler:    _PlayerKitService_SetPlayerCanBuild_Handler,
		},
		{
			MethodName: "GetPlayerCanDig",
			Handler:    _PlayerKitService_GetPlayerCanDig_Handler,
		},
		{
			MethodName: "SetPlayerCanDig",
			Handler:    _PlayerKitService_SetPlayerCanDig_Handler,
		},
		{
			MethodName: "GetPlayerCanDoorsAndSwitches",
			Handler:    _PlayerKitService_GetPlayerCanDoorsAndSwitches_Handler,
		},
		{
			MethodName: "SetPlayerCanDoorsAndSwitches",
			Handler:    _PlayerKitService_SetPlayerCanDoorsAndSwitches_Handler,
		},
		{
			MethodName: "GetPlayerCanOpenContainers",
			Handler:    _PlayerKitService_GetPlayerCanOpenContainers_Handler,
		},
		{
			MethodName: "SetPlayerCanOpenContainers",
			Handler:    _PlayerKitService_SetPlayerCanOpenContainers_Handler,
		},
		{
			MethodName: "GetPlayerCanAttackPlayers",
			Handler:    _PlayerKitService_GetPlayerCanAttackPlayers_Handler,
		},
		{
			MethodName: "SetPlayerCanAttackPlayers",
			Handler:    _PlayerKitService_SetPlayerCanAttackPlayers_Handler,
		},
		{
			MethodName: "GetPlayerCanAttackMobs",
			Handler:    _PlayerKitService_GetPlayerCanAttackMobs_Handler,
		},
		{
			MethodName: "SetPlayerCanAttackMobs",
			Handler:    _PlayerKitService_SetPlayerCanAttackMobs_Handler,
		},
		{
			MethodName: "GetPlayerCanOperatorCommands",
			Handler:    _PlayerKitService_GetPlayerCanOperatorCommands_Handler,
		},
		{
			MethodName: "SetPlayerCanOperatorCommands",
			Handler:    _PlayerKitService_SetPlayerCanOperatorCommands_Handler,
		},
		{
			MethodName: "GetPlayerCanTeleport",
			Handler:    _PlayerKitService_GetPlayerCanTeleport_Handler,
		},
		{
			MethodName: "SetPlayerCanTeleport",
			Handler:    _PlayerKitService_SetPlayerCanTeleport_Handler,
		},
		{
			MethodName: "GetPlayerStatusInvulnerable",
			Handler:    _PlayerKitService_GetPlayerStatusInvulnerable_Handler,
		},
		{
			MethodName: "GetPlayerStatusFlying",
			Handler:    _PlayerKitService_GetPlayerStatusFlying_Handler,
		},
		{
			MethodName: "GetPlayerStatusMayFly",
			Handler:    _PlayerKitService_GetPlayerStatusMayFly_Handler,
		},
		{
			MethodName: "GetPlayerDeviceID",
			Handler:    _PlayerKitService_GetPlayerDeviceID_Handler,
		},
		{
			MethodName: "GetPlayerEntityRuntimeID",
			Handler:    _PlayerKitService_GetPlayerEntityRuntimeID_Handler,
		},
		{
			MethodName: "GetPlayerEntityMetadata",
			Handler:    _PlayerKitService_GetPlayerEntityMetadata_Handler,
		},
		{
			MethodName: "GetPlayerIsOP",
			Handler:    _PlayerKitService_GetPlayerIsOP_Handler,
		},
		{
			MethodName: "GetPlayerOnline",
			Handler:    _PlayerKitService_GetPlayerOnline_Handler,
		},
		{
			MethodName: "SendPlayerChat",
			Handler:    _PlayerKitService_SendPlayerChat_Handler,
		},
		{
			MethodName: "SendPlayerRawChat",
			Handler:    _PlayerKitService_SendPlayerRawChat_Handler,
		},
		{
			MethodName: "SendPlayerTitle",
			Handler:    _PlayerKitService_SendPlayerTitle_Handler,
		},
		{
			MethodName: "SendPlayerActionBar",
			Handler:    _PlayerKitService_SendPlayerActionBar_Handler,
		},
		{
			MethodName: "InterceptPlayerJustNextInput",
			Handler:    _PlayerKitService_InterceptPlayerJustNextInput_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/playerkit.proto",
}
