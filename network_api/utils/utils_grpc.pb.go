// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/utils.proto

package utilspb

import (
	context "context"
	response "github.com/Yeah114/tempest-core/network_api/response"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UtilsService_SendPacket_FullMethodName                      = "/fateark.proto.utils.UtilsService/SendPacket"
	UtilsService_SendBytePacket_FullMethodName                  = "/fateark.proto.utils.UtilsService/SendBytePacket"
	UtilsService_GetPacketNameIDMapping_FullMethodName          = "/fateark.proto.utils.UtilsService/GetPacketNameIDMapping"
	UtilsService_GetClientMaintainedBotBasicInfo_FullMethodName = "/fateark.proto.utils.UtilsService/GetClientMaintainedBotBasicInfo"
	UtilsService_GetClientMaintainedExtendInfo_FullMethodName   = "/fateark.proto.utils.UtilsService/GetClientMaintainedExtendInfo"
)

// UtilsServiceClient is the client API for UtilsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UtilsServiceClient interface {
	SendPacket(ctx context.Context, in *SendPacketRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	SendBytePacket(ctx context.Context, in *SendBytePacketRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	GetPacketNameIDMapping(ctx context.Context, in *GetPacketNameIDMappingRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	GetClientMaintainedBotBasicInfo(ctx context.Context, in *GetClientMaintainedBotBasicInfoRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	GetClientMaintainedExtendInfo(ctx context.Context, in *GetClientMaintainedExtendInfoRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
}

type utilsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUtilsServiceClient(cc grpc.ClientConnInterface) UtilsServiceClient {
	return &utilsServiceClient{cc}
}

func (c *utilsServiceClient) SendPacket(ctx context.Context, in *SendPacketRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, UtilsService_SendPacket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsServiceClient) SendBytePacket(ctx context.Context, in *SendBytePacketRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, UtilsService_SendBytePacket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsServiceClient) GetPacketNameIDMapping(ctx context.Context, in *GetPacketNameIDMappingRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, UtilsService_GetPacketNameIDMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsServiceClient) GetClientMaintainedBotBasicInfo(ctx context.Context, in *GetClientMaintainedBotBasicInfoRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, UtilsService_GetClientMaintainedBotBasicInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsServiceClient) GetClientMaintainedExtendInfo(ctx context.Context, in *GetClientMaintainedExtendInfoRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, UtilsService_GetClientMaintainedExtendInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilsServiceServer is the server API for UtilsService service.
// All implementations must embed UnimplementedUtilsServiceServer
// for forward compatibility.
type UtilsServiceServer interface {
	SendPacket(context.Context, *SendPacketRequest) (*response.GeneralResponse, error)
	SendBytePacket(context.Context, *SendBytePacketRequest) (*response.GeneralResponse, error)
	GetPacketNameIDMapping(context.Context, *GetPacketNameIDMappingRequest) (*response.GeneralResponse, error)
	GetClientMaintainedBotBasicInfo(context.Context, *GetClientMaintainedBotBasicInfoRequest) (*response.GeneralResponse, error)
	GetClientMaintainedExtendInfo(context.Context, *GetClientMaintainedExtendInfoRequest) (*response.GeneralResponse, error)
	mustEmbedUnimplementedUtilsServiceServer()
}

// UnimplementedUtilsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUtilsServiceServer struct{}

func (UnimplementedUtilsServiceServer) SendPacket(context.Context, *SendPacketRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPacket not implemented")
}
func (UnimplementedUtilsServiceServer) SendBytePacket(context.Context, *SendBytePacketRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBytePacket not implemented")
}
func (UnimplementedUtilsServiceServer) GetPacketNameIDMapping(context.Context, *GetPacketNameIDMappingRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPacketNameIDMapping not implemented")
}
func (UnimplementedUtilsServiceServer) GetClientMaintainedBotBasicInfo(context.Context, *GetClientMaintainedBotBasicInfoRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientMaintainedBotBasicInfo not implemented")
}
func (UnimplementedUtilsServiceServer) GetClientMaintainedExtendInfo(context.Context, *GetClientMaintainedExtendInfoRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientMaintainedExtendInfo not implemented")
}
func (UnimplementedUtilsServiceServer) mustEmbedUnimplementedUtilsServiceServer() {}
func (UnimplementedUtilsServiceServer) testEmbeddedByValue()                      {}

// UnsafeUtilsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UtilsServiceServer will
// result in compilation errors.
type UnsafeUtilsServiceServer interface {
	mustEmbedUnimplementedUtilsServiceServer()
}

func RegisterUtilsServiceServer(s grpc.ServiceRegistrar, srv UtilsServiceServer) {
	// If the following call pancis, it indicates UnimplementedUtilsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UtilsService_ServiceDesc, srv)
}

func _UtilsService_SendPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).SendPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilsService_SendPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).SendPacket(ctx, req.(*SendPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilsService_SendBytePacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBytePacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).SendBytePacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilsService_SendBytePacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).SendBytePacket(ctx, req.(*SendBytePacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilsService_GetPacketNameIDMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPacketNameIDMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).GetPacketNameIDMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilsService_GetPacketNameIDMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).GetPacketNameIDMapping(ctx, req.(*GetPacketNameIDMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilsService_GetClientMaintainedBotBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientMaintainedBotBasicInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).GetClientMaintainedBotBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilsService_GetClientMaintainedBotBasicInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).GetClientMaintainedBotBasicInfo(ctx, req.(*GetClientMaintainedBotBasicInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilsService_GetClientMaintainedExtendInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientMaintainedExtendInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).GetClientMaintainedExtendInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilsService_GetClientMaintainedExtendInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).GetClientMaintainedExtendInfo(ctx, req.(*GetClientMaintainedExtendInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UtilsService_ServiceDesc is the grpc.ServiceDesc for UtilsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UtilsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fateark.proto.utils.UtilsService",
	HandlerType: (*UtilsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPacket",
			Handler:    _UtilsService_SendPacket_Handler,
		},
		{
			MethodName: "SendBytePacket",
			Handler:    _UtilsService_SendBytePacket_Handler,
		},
		{
			MethodName: "GetPacketNameIDMapping",
			Handler:    _UtilsService_GetPacketNameIDMapping_Handler,
		},
		{
			MethodName: "GetClientMaintainedBotBasicInfo",
			Handler:    _UtilsService_GetClientMaintainedBotBasicInfo_Handler,
		},
		{
			MethodName: "GetClientMaintainedExtendInfo",
			Handler:    _UtilsService_GetClientMaintainedExtendInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/utils.proto",
}
