// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/reversaler.proto

package reversalerpb

import (
	context "context"
	response "github.com/Yeah114/tempest-core/network_api/response"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FateReversalerService_NewFateReversaler_FullMethodName = "/fateark.proto.reversaler.FateReversalerService/NewFateReversaler"
	FateReversalerService_WaitDead_FullMethodName          = "/fateark.proto.reversaler.FateReversalerService/WaitDead"
	FateReversalerService_Ping_FullMethodName              = "/fateark.proto.reversaler.FateReversalerService/Ping"
)

// FateReversalerServiceClient is the client API for FateReversalerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FateReversalerServiceClient interface {
	NewFateReversaler(ctx context.Context, in *NewFateReversalerRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error)
	WaitDead(ctx context.Context, in *WaitDeadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[response.DeadReason], error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*response.PingResponse, error)
}

type fateReversalerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFateReversalerServiceClient(cc grpc.ClientConnInterface) FateReversalerServiceClient {
	return &fateReversalerServiceClient{cc}
}

func (c *fateReversalerServiceClient) NewFateReversaler(ctx context.Context, in *NewFateReversalerRequest, opts ...grpc.CallOption) (*response.GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.GeneralResponse)
	err := c.cc.Invoke(ctx, FateReversalerService_NewFateReversaler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fateReversalerServiceClient) WaitDead(ctx context.Context, in *WaitDeadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[response.DeadReason], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FateReversalerService_ServiceDesc.Streams[0], FateReversalerService_WaitDead_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WaitDeadRequest, response.DeadReason]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FateReversalerService_WaitDeadClient = grpc.ServerStreamingClient[response.DeadReason]

func (c *fateReversalerServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*response.PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(response.PingResponse)
	err := c.cc.Invoke(ctx, FateReversalerService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FateReversalerServiceServer is the server API for FateReversalerService service.
// All implementations must embed UnimplementedFateReversalerServiceServer
// for forward compatibility.
type FateReversalerServiceServer interface {
	NewFateReversaler(context.Context, *NewFateReversalerRequest) (*response.GeneralResponse, error)
	WaitDead(*WaitDeadRequest, grpc.ServerStreamingServer[response.DeadReason]) error
	Ping(context.Context, *PingRequest) (*response.PingResponse, error)
	mustEmbedUnimplementedFateReversalerServiceServer()
}

// UnimplementedFateReversalerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFateReversalerServiceServer struct{}

func (UnimplementedFateReversalerServiceServer) NewFateReversaler(context.Context, *NewFateReversalerRequest) (*response.GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewFateReversaler not implemented")
}
func (UnimplementedFateReversalerServiceServer) WaitDead(*WaitDeadRequest, grpc.ServerStreamingServer[response.DeadReason]) error {
	return status.Errorf(codes.Unimplemented, "method WaitDead not implemented")
}
func (UnimplementedFateReversalerServiceServer) Ping(context.Context, *PingRequest) (*response.PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFateReversalerServiceServer) mustEmbedUnimplementedFateReversalerServiceServer() {}
func (UnimplementedFateReversalerServiceServer) testEmbeddedByValue()                               {}

// UnsafeFateReversalerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FateReversalerServiceServer will
// result in compilation errors.
type UnsafeFateReversalerServiceServer interface {
	mustEmbedUnimplementedFateReversalerServiceServer()
}

func RegisterFateReversalerServiceServer(s grpc.ServiceRegistrar, srv FateReversalerServiceServer) {
	// If the following call pancis, it indicates UnimplementedFateReversalerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FateReversalerService_ServiceDesc, srv)
}

func _FateReversalerService_NewFateReversaler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFateReversalerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FateReversalerServiceServer).NewFateReversaler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FateReversalerService_NewFateReversaler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FateReversalerServiceServer).NewFateReversaler(ctx, req.(*NewFateReversalerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FateReversalerService_WaitDead_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WaitDeadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FateReversalerServiceServer).WaitDead(m, &grpc.GenericServerStream[WaitDeadRequest, response.DeadReason]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FateReversalerService_WaitDeadServer = grpc.ServerStreamingServer[response.DeadReason]

func _FateReversalerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FateReversalerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FateReversalerService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FateReversalerServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FateReversalerService_ServiceDesc is the grpc.ServiceDesc for FateReversalerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FateReversalerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fateark.proto.reversaler.FateReversalerService",
	HandlerType: (*FateReversalerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewFateReversaler",
			Handler:    _FateReversalerService_NewFateReversaler_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _FateReversalerService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WaitDead",
			Handler:       _FateReversalerService_WaitDead_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/reversaler.proto",
}
